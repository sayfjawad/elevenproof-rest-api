// Root build.gradle

plugins {
    id 'java'
    alias libs.plugins.springBoot apply false
    alias libs.plugins.springBootDependencyManagement apply false
    alias libs.plugins.piTest apply false

}

allprojects {
    group = 'nl.multicode.elevenproof'
    version = '1.0-SNAPSHOT'
    sourceCompatibility = '17'

    repositories {
        mavenCentral()
    }

    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'

    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    tasks.named('test') {
        useJUnitPlatform()
    }

    dependencies {
        compileOnly libs.lombok
        annotationProcessor libs.lombok
    }
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'info.solidsoft.pitest'


    pitest {
        targetClasses = ['nl.multicode.*']
        targetTests = ['nl.multicode.*']
        mutationThreshold = 85
        outputFormats = ['HTML']
        jvmArgs = ['--add-opens', 'java.base/java.lang=ALL-UNNAMED']
    }
}

dependencies {
    testImplementation libs.junitJupiterEngine
    testImplementation libs.junitJupiterParams
    testImplementation libs.assertjCore
    testImplementation libs.mockitoCore
    testImplementation libs.mockitoJunitJupiter
}

task allDependencies {
    subprojects.each { project ->
        project.tasks.create(name: "printDependencies", type: DefaultTask) {
            doLast {
                println "Dependencies for project ${project.name}:"
                project.configurations.each { configuration ->
                    try {
                        configuration.allDependencies.each { dependency ->
                            println "  ${configuration.name} -> ${dependency.group}:${dependency.name}:${dependency.version}"
                        }
                    } catch (Exception e) {
                        // Handle exceptions if needed
                    }
                }
            }
        }
        dependsOn "${project.path}:printDependencies"
    }
}

evaluationDependsOn(':generated')
